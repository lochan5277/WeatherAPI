@page "/favlist"
@using WeatherApp_API.Shared.Models
@using WeatherApp_API.Client.Services

@inject AuthService Auth
@inject IJSRuntime JS
@inject WeatherService WeatherService
<ProtectedPage>
<style>
    body{
        min-height: 100vh;
        background-image: linear-gradient(to bottom, #b7f8db 0%, #50c9c3 100%);
        background-repeat: no-repeat;
        background-size: cover;
        background-attachment: fixed;
    }
    input {
        margin-bottom: 10px;
        width: 200px;
        height: 37px;
        padding: 5px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }
    p {
        margin-top: 20px;
        font-size: 1.2em;
        color: red;
    }
    .weather-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 10px 40px;
        max-width: 600px;
        margin: 20px auto;
        padding: 15px;
        background-color: #e0f7fa;
        border-radius: 10px;
        font-size: 16px;
    }

    .weather-grid p {
        margin: 0;
        padding: 4px 0;
        color: #000;
    }

    .weather-title {
        font-size: 24px;
        font-weight: bold;
        text-align: center;
        margin-bottom: 15px;
    }
</style>

<h3>Favourite Weather Settings</h3><br>
<h5>Set your favorite city and weather condition to get personalized updates.</h5><br>

<div class="fav-form">
    <input @bind="favCity" placeholder="Enter your favourite city" />
    <input @bind="favWeather" placeholder="Enter your favourite weather (e.g., Clear, Rain)" /><br>
    <button class="btn btn-primary" @onclick="OnSearch">Search Weather</button>
    <button class="btn btn-primary" @onclick="SavePreferences">Save Preferences</button>
    <button class="btn btn-secondary" @onclick="ClearOrModify">Clear/Modify</button><br>
</div>

@if (!string.IsNullOrWhiteSpace(savedMessage))
{
    <p>@savedMessage</p>
}

@if(!string.IsNullOrWhiteSpace(currentstatus))
{
    <br><h6>@currentstatus</h6>
}

@if (invokestart == "Yes" && currentWeather != null)
{
    
    <div class="weather-title">Current Weather - @currentWeather.Name</div>
    <div class="weather-grid">
        <p><strong>Temp:</strong> @(currentWeather.Main != null ? $"{currentWeather.Main.Temp} °C" : "")</p>
        <p><strong>Feels Like:</strong> @(currentWeather.Main != null ? $"{currentWeather.Main.Feels_Like} °C" : "")</p>

        <p><strong>Condition:</strong> @(currentWeather.Weather?.FirstOrDefault()?.Description ?? "")</p>
        <p><strong>Humidity:</strong> @(currentWeather.Main != null ? $"{currentWeather.Main.Humidity}%" : "")</p>

        <p><strong>Wind Speed:</strong> @($"{currentWeather.Wind?.Speed} m/s")</p>
        <p><strong>Cloudiness:</strong> @($"{currentWeather.Clouds?.All}%")</p>

        <p><strong>Sunrise:</strong> @(currentWeather.Sys?.Sunrise != null ? DateTimeOffset.FromUnixTimeSeconds(currentWeather.Sys.Sunrise.Value).ToLocalTime().DateTime.ToShortTimeString() : "")</p>
        <p><strong>Sunset:</strong> @(currentWeather.Sys?.Sunset != null ? DateTimeOffset.FromUnixTimeSeconds(currentWeather.Sys.Sunset.Value).ToLocalTime().DateTime.ToShortTimeString() : "")</p>
    </div>
}

@code {
    private string favCity ="";
    private string favWeather = "";
    private string savedMessage = "";
    private string currentstatus = "";
    private string invokestart = "No";

    private string? dbCity;
    private string? dbWeather;

    private WeatherResponse? currentWeather;

    private List<string> matchingCities = new();

    protected override async Task OnInitializedAsync()
    {
        var user = await Auth.GetCurrentUserAsync();
        dbCity = user?.FavoriteCity;
        dbWeather = user?.FavoriteWeather;

        favCity = dbCity ?? "";
        favWeather = dbWeather ?? "";
    }

    private async Task SavePreferences()
    {
        if (!string.IsNullOrWhiteSpace(dbCity) || !string.IsNullOrWhiteSpace(dbWeather))
        {
            savedMessage = "Preferences already exist. Use Modify instead.";
            return;
        }

        if (string.IsNullOrWhiteSpace(favCity) || string.IsNullOrWhiteSpace(favWeather))
        {
            savedMessage = "Both fields are required.";
            return;
        }

        var success = await Auth.SaveFavouriteAsync(favCity, favWeather);
        savedMessage = success ? "Preferences saved successfully!" : "Failed to save preferences.";
    }

    private async Task ClearOrModify()
    {
        bool inputsEmpty = string.IsNullOrWhiteSpace(favCity) && string.IsNullOrWhiteSpace(favWeather);
        bool inputsUnchanged = favCity == dbCity && favWeather == dbWeather;

        if (inputsEmpty)
        {
            savedMessage = "Preferences required.";
        }
        else if (inputsUnchanged)
        {
            bool confirmed = await JS.InvokeAsync<bool>("confirmClear");
            if (confirmed)
            {
                var success = await Auth.SaveFavouriteAsync(null, null);
                if (success)
                {
                    favCity = "";
                    favWeather = "";
                    dbCity = null;
                    dbWeather = null;
                    savedMessage = "Preferences cleared.";
                }
                else
                {
                    savedMessage = "Failed to clear preferences.";
                }
            }
            else
            {
                savedMessage = "Preferences retained.";
            }
        }
        else
        {
            // Update modified values
            var success = await Auth.SaveFavouriteAsync(favCity, favWeather);
            if (success)
            {
                dbCity = favCity;
                dbWeather = favWeather;
                savedMessage = "Preferences updated.";
            }
            else
            {
                savedMessage = "Failed to update preferences.";
            }
        }
    }
    
    private async Task OnSearch()
    {
        if (string.IsNullOrWhiteSpace(favCity) || string.IsNullOrWhiteSpace(favWeather))
        {
            savedMessage = "Both fields are required.";
            return;
        }
        try
        {
            currentWeather = await WeatherService.GetLiveWeather(favCity);
            if (currentWeather != null && currentWeather.Weather.Any(w => w.Description.Equals(favWeather, StringComparison.OrdinalIgnoreCase)))
            {
                savedMessage = $"Found weather: {currentWeather.Weather.FirstOrDefault()?.Description} in {favCity}.";
                invokestart = "Yes";
            }
            else
            {
                currentstatus = $"No matching weather found for {favCity} with condition {favWeather}.";
                invokestart = "Yes";
            }
        }
        catch (Exception ex)
        {
            savedMessage = "Error fetching weather data.";
            currentWeather = null;
        }
    }

}

<script>
    window.confirmClear = function () {
        return confirm("Are you sure you want to clear your preferences?");
    };
</script>
</ProtectedPage>
